{"kernelspec":{"display_name":"Anaconda (Python 3)","language":"python","name":"anaconda3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.1"}}
{"cell_type":"code","execution_count":22,"metadata":{"collapsed":false,"trusted":true},"outputs":[],"source":"from Crypto.Random import random\n\ndef randbytes(k):\n    return random.getrandbits(8*k).to_bytes(k, byteorder='big')\n\ndef padPKCS7(x, k):\n    ch = k - (len(x) % k)\n    return x + bytes([ch] * ch)"}
{"cell_type":"code","execution_count":23,"metadata":{"collapsed":false,"trusted":true},"outputs":[],"source":"# Taken from https://github.com/sfstpala/SlowSHA\nclass SHA1 (object):\n    _default_h0, _default_h1, _default_h2, _default_h3, _default_h4, = (\n        0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0)\n\n    def __init__(self, message, h0 = _default_h0, h1 = _default_h1, h2 = _default_h2, h3 = _default_h3, h4 = _default_h4, length = None):\n        self._h0 = h0\n        self._h1 = h1\n        self._h2 = h2\n        self._h3 = h3\n        self._h4 = h4\n        if length is None:\n            length = len(message) * 8\n        length = bin(length)[2:].rjust(64, \"0\")\n        while len(message) > 64:\n            self._handle(''.join(bin(i)[2:].rjust(8, \"0\")\n                for i in message[:64]))\n            message = message[64:]\n        message = ''.join(bin(i)[2:].rjust(8, \"0\") for i in message) + \"1\"\n        message += \"0\" * ((448 - len(message) % 512) % 512) + length\n        for i in range(len(message) // 512):\n            self._handle(message[i * 512:i * 512 + 512])\n\n\n    def _handle(self, chunk):\n\n        lrot = lambda x, n: (x << n) | (x >> (32 - n))\n        w = []\n\n        for j in range(len(chunk) // 32):\n            w.append(int(chunk[j * 32:j * 32 + 32], 2))\n\n        for i in range(16, 80):\n            w.append(lrot(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16], 1)\n                & 0xffffffff)\n\n        a = self._h0\n        b = self._h1\n        c = self._h2\n        d = self._h3\n        e = self._h4\n\n        for i in range(80):\n\n            if i <= i <= 19:\n                f, k = d ^ (b & (c ^ d)), 0x5a827999\n            elif 20 <= i <= 39:\n                f, k = b ^ c ^ d, 0x6ed9eba1\n            elif 40 <= i <= 59:\n                f, k = (b & c) | (d & (b | c)), 0x8f1bbcdc\n            elif 60 <= i <= 79:\n                f, k = b ^ c ^ d, 0xca62c1d6\n\n            temp = lrot(a, 5) + f + e + k + w[i] & 0xffffffff\n            a, b, c, d, e = temp, a, lrot(b, 30), c, d\n\n        self._h0 = (self._h0 + a) & 0xffffffff\n        self._h1 = (self._h1 + b) & 0xffffffff\n        self._h2 = (self._h2 + c) & 0xffffffff\n        self._h3 = (self._h3 + d) & 0xffffffff\n        self._h4 = (self._h4 + e) & 0xffffffff\n\n    def _digest(self):\n        return (self._h0, self._h1, self._h2, self._h3, self._h4)\n\n    def hexdigest(self):\n        return ''.join(hex(i)[2:].rjust(8, \"0\")\n            for i in self._digest())\n\n    def digest(self):\n        hexdigest = self.hexdigest()\n        return bytes(int(hexdigest[i * 2:i * 2 + 2], 16)\n            for i in range(len(hexdigest) // 2))\n\ndef authSHA1(key, message):\n    return SHA1(key + message).digest()"}
{"cell_type":"code","execution_count":50,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"b'\\x10n6\\x10$\\\\\\x8e\\x8el\\xf9\\xa4\\x10r\\x1d(9\\x84\\xcaiW' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'usR\\x96 \\xf9\\xbf\\xa9\\x89\\xc6)\\xf7>n\\xf0\\xe0\\x15\\xa3_\\x8c' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'\\x8d\\xc7l\\xea\\x12\\xff>\\xa1\\xa7~\\x0fjG\\xc2xG\\xcc@ #' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'\\x88\\xab\\xe7\\xf1\\x9bc[\\xcb\\xab\\xa5\\rrj\\x88\\xa7\\xb1\\xd3\\xb38t' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'T\\x9e\\x17lJ\\xdf@\\x97\\xb6\\xc7\\x90\\xaes[\\xf5\\x83\\x7f2\\x05\\xb3' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'q\\xb7\\x9d|m\\xc7\\x88\\x82\\xe3\\xb4\\xa4\\x93\\x92\\x08l\\x883\\x81\\xfaq' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'$\\xd6\\xbeK\\xdf\\xc5\\xea\\x87\\x0e\\xfb\\xa1\\xa2\\xf3\\x1a\\xcf\\x8e\\xe3\\xab\\xc8&' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'\\xb9\\x9c\\x81\\xf6a\\x9cQ\\xe4`cd\\xa5\\xcb\\xb8\\x02I\\xd0\\xaf\\x12\\x86' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb\"2\\x1e&F\\xf5R\\xf5\\xe2L:\\xcdl'\\xf94\\xb9\\xac_\\xb7z\" b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'\\x85\\x9c\\xe5P\\xceV)y5\\xa8\\xddMI\\xa9\\x95\\x9aZ\\xc6W\\xed' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'\\x89\\xb4\\x8fF\\xf3\\x9e\\x89\\xa1\\x82\\xab@\\x19\\xde\\x9a\\xe7\\xc7\\xdc\\x06\\x0fA' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'-\\xa0\\xdee\\xc4U\\xdf\\x82\\xa7\\x96\\\\\\xb2m\\x9fh\\xa7\\xd0\\x04\\x03\\xa7' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'L\\x89\\xf5ET\\xf0\\xa2\\x0e\\xe5\\xfb\\x86\\xa7S`\\xd0\\xf0\\xdc \\xd3\\xf0' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'\\xe4\\xdf\\r\\x9f\\xd5?/\\xd1\\xd2\"\\xa07q\\xaf\\xc4_\\xf0 \\xea5' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'Z8u8\\x04\\xb6\\x06^p7\\x97\\xbf^\\x80\\xe5\\x95\\xb7c\\xba9' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'B\\xbf\\x9fF<U\\x8f\\xd2\\xa0a\\xeaU\\x98W\\x0b\\x11T\\xa5\\xa8/' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'\\xa5\\xd9os/E+\\xd5\\xcc\\xea\\x0b\\xc8h\\xb0<\\x85\\x06\\xc9d\\xf7' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'Y\\x10\\xe0p\\x869\\xdf\\nC\\xfa4\\x98N\\x97\\x0e\\x8c\\xeb\\x8f\"\\xd2' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'\\xc5X\\x98\\x13\\x17\\xc8\\x05g\\x80\\n\\xde\\xbcnBi\\xffK\\xe1\\xe8\\x9a' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'?\\xb8l\\xa22\\x86\\xd6#\\x9a\\xe5\\x0fn\\xd6M\\x8d-\\x10\\xd6?\\x9e' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'@J\\x90\\xe5T\\xde\\xb5\\xaa\\x13\\xc2\\xe1u\\xe9.\\x9f\\xb7\\r\\xbb\\xd1\\xef' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'\\x9d\\xb4B\\x89\\xce\\x83a?\\xc1B,2,nS\\xbcB\\xc9\\xe4\\x9a' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'\\x04\\\\@\\xae\\x0f.\\xfa\\xc3\\x18\\x94\\x19u\\x16-\\x175|bW\\x06' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'9\\n\\r#\\x1f\\x10\\xaa\\xee5\\x10u\\n&\\x97W\\xd4bIlD' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb\"\\xdfj\\xe2\\xda}Q\\x97\\xeaE\\xf7\\xd4'%r2\\xcc\\x99\\xb3\\xc8\\xd0\" b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'<\\x1a\\xe6=\\xfd7\\x8eS\\x81\\x180\\x15X\\xb7p\\xc5\\xbef1q' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb\"'\\xd2al\\xec\\xaa\\xb8J\\x1f\\x0f\\x11q\\x02]\\x9b\\xc1\\x19\\x96\\xf6\\xfa\" b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'v\\xf8\\x12\\x85_\\x17w\\xff\\xc1\\x94\\x15\\x19Oz\\r\\xaa\\x18\\xd9=\\x15' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb\"\\xf1\\xcb \\x1ejg\\x08'D\\xae\\xe9`_>\\xf8%`\\xe0!\\xbb\" b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'^\\xf0\\xea}#\\xa0D\\xd9\\x87\\xbf.K\\x03\\x16\\xf0\\xc9R\\xd7\\x17x' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'|N\\xa4\\xe3\\xa8\\x05.\\xc4\\x1b\\xe2\\xeb8\\x16\\xa0\\x9f\\xd2\\xe6\\x94N\\x8f' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb'\\x1ej\\xa9\\xe7\\xe6\\xba\\x8eH\\xdf\\xfd\\x95e\\xea\\x85\\xce\\xe7\\x0e\\xab\\xdej' b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\nb\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\" b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\"\n(b'comment1=cooking%20MCs;userdata=foo;comment2=%20like%20a%20pound%20of%20bacon\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03h;admin=true', b\"(s\\xf6 W\\xb0\\x92.O\\xa9\\xc544\\xc3\\x9a\\xc9\\xb3w'\\xb4\")\n"}],"source":"from Crypto.Random import random\nimport struct\n\ndef padSHA1(s):\n    l = len(s) * 8\n    s += b'\\x80'\n    s += b'\\x00' * ((56 - (len(s) % 64)) % 64)\n    s += struct.pack('>Q', l)\n    return s\n\nkeylen = random.randint(0, 100)\nkey = randbytes(keylen)\n\ndef validate(message, digest):\n    print (authSHA1(key, message), digest)\n    return authSHA1(key, message) == digest\n\nmessage = b'comment1=cooking%20MCs;userdata=foo;comment2=%20like%20a%20pound%20of%20bacon'\nmessageDigest = authSHA1(key, message)\n\ndef forgeHash(keylen, message, digest, suffix):\n    paddedForgedMessageWithKey = padSHA1(key + message) + suffix\n    forgedMessage = paddedForgedMessageWithKey[keylen:]\n    h = struct.unpack('>5I', digest)\n    forgedDigest = SHA1(suffix, h[0], h[1], h[2], h[3], h[4], len(paddedForgedMessageWithKey) * 8).digest()\n    return (forgedMessage, forgedDigest)\n\ndef forgeValidatingHash(maxkeylen, message, digest, suffix):\n    for i in range(maxkeylen):\n        (forgedMessage, forgedDigest) = forgeHash(i, message, digest, suffix)\n        if validate(forgedMessage, forgedDigest):\n            return(forgedMessage, forgedDigest)\n    raise Exception('unexpected')\n\nprint(forgeValidatingHash(100, message, messageDigest, b';admin=true'))"}
{"cell_type":"code","execution_count":49,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/plain":"b'\\xda9\\xa3\\xee^kK\\r2U\\xbf\\xef\\x95`\\x18\\x90\\xaf\\xd8\\x07\\t'"},"execution_count":49,"metadata":{},"output_type":"execute_result"}],"source":"SHA1(\"\").digest() # https://en.wikipedia.org/wiki/SHA-1"}
{"cell_type":"code","execution_count":48,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"ename":"LookupError","evalue":"'hex' is not a text encoding; use codecs.encode() to handle arbitrary codecs","output_type":"error","traceback":["\u001b[1;31m\u001b[0m","\u001b[1;31mLookupError\u001b[0mTraceback (most recent call last)","\u001b[1;32m<ipython-input-48-84c755c75244>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mbytes\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'da39a3ee5e6b4b0d3255bfef95601890afd80709'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'hex'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[1;31mLookupError\u001b[0m: 'hex' is not a text encoding; use codecs.encode() to handle arbitrary codecs"]}],"source":""}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":""}