"{\"notebook_name\":\"02_RSA_Demo.ipynb\"}\n\"## Public Key Cryptography\\n\\nThough RSA should be avoided for modern secure systems due to concerns with advancements in the discrete logarithm problem. We will still take a look at it.\\n\\nPublic key cryptography is a type of cryptography that simplifies the key exchange problem: there is no need for a secure channel to communicate keys over. Instead, each user generates a private key with an associated public key. The public key can be given out without any security risk. There is still the challenge of distributing and verifying public keys, but that is outside the scope of this document.\\n\\nLet's delve into RSA first:\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"markdown\"}\n\"import random\\nimport math\\n\\nrandom.seed(1)\\n# Function to test for composite. Return True for composite.\\ndef _func_composite_test(a,d,n,s):\\n    if pow( a, d, n ) == 1:\\n        return False\\n    for i in range(s):\\n        if pow( a, 2**i * d, n ) == n-1:\\n            return False\\n    return True\\n\\n# Function to test for primality using Miller Rabin.\\ndef _func_millerRabin_probable_prime(n):\\n    assert n >= 2\\n    if n == 2:\\n        return True\\n    if n % 2 == 0:\\n        return False\\n    # Write n-1 as 2**s * d\\n    # Repeatedly try to divide n-1 by 2\\n    s, d = 0, n-1\\n    while True:\\n        quotient, remainder = divmod(d, 2)\\n        if remainder == 1:\\n            break\\n        s += 1\\n        d = quotient\\n    assert ( 2**s * d == n-1 )\\n    # test the base a to see whether it is a witness for the compositeness of n\\n    for i in range(0,10): # range is arbitrary...\\n        a = random.randint( 2, n-1 )\\n        if _func_composite_test(a,d,n,s):\\n            return False\\n    # Return True because n is not found to be a composite.\\n    return True\\n\\n# Function to find a prime between a lower and an upper limit.\\ndef find_prime( limit_lower, limit_upper ):\\n    # Return a pseudo prime number roughly between a and b (can be larger than b).\\n    # Raise ValueError if cannot find a pseudo prime after 10 * ln(x) + 3 tries.\\n    x = random.randint(limit_lower, limit_upper)\\n    for i in range( 0, int(10 * math.log(x) + 3) ):\\n        if _func_millerRabin_probable_prime(x):\\n            return x\\n        else:\\n            x += 1\\n    raise ValueError\\n\\n# Create a prime and show it.\\nprint 'Prime p: ', find_prime( limit_lower=10**12, limit_upper=10**13 )\\nprint 'Prime q: ', find_prime( limit_lower=10**12, limit_upper=10**13 )\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":1,\"outputs\":[{\"output_type\":\"stream\",\"text\":\"Prime p:  2209278197029\\nPrime q:  1229012748941\\n\",\"name\":\"stdout\"}]}\n\"We now have two prime numbers and we will use these to generate a large co-prime N. \\n\\n$N=p∗q$\\n\\nThe amazing thing about these co-primes is that their factors are p and q. No other integers form the factors of this large co-prime. Since the **factorization** of large numbers is a mathematically hard problem (One-way trapdoor function) this gives us a perfect number that is easy to calculate when you know _p_ and _q_, but very hard to work back from when you only know _N_ and not know _p_ and _q_. \"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"p = 2209278197029 \\nq = 1229012748941\\nN = p * q\\nprint 'N: ', N\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":2,\"outputs\":[{\"output_type\":\"stream\",\"text\":\"N:  2715231070106027509096289\\n\",\"name\":\"stdout\"}]}\n\"The main idea behind RSA is that we want to have both a part of the key that is public (i.e., everybody can know that part/those parts) and a part that is private (i.e., only we know that part).\\nIn order to achieve this we are going to use another piece of mathematics that is also very easy to calculate but very hard to undo: Modular Arithmetics.\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"phi_N = N - p - q + 1\\nprint 'Phi of N:   ', phi_N\\nprint 'Difference: ', N - phi_N\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":3,\"outputs\":[{\"output_type\":\"stream\",\"text\":\"Phi of N:    2715231070102589218150320\\nDifference:  3438290945969\\n\",\"name\":\"stdout\"}]}\n\"We now need to select two integers _e_ and _d_ \\nIt is standard practice to select _e = 65537 when N - p - q + 1 > 65537_. We can then select d accordingly. \"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"# Function to get d from e and phi(N)\\ndef fn_rsa_get_d( e, phi ):\\n    N_phi = phi\\n    x = lasty = 0\\n    lastx = y = 1\\n    while phi != 0:\\n        q = e // phi\\n        e, phi = phi, e % phi\\n        x, lastx = lastx - q*x, x\\n        y, lasty = lasty - q*y, y\\n    if lastx < 0:\\n        lastx += N_phi\\n    return lastx\\n\\n# Lets try this\\ne = 65537\\nd = fn_rsa_get_d( e=e, phi=phi_N )\\nprint 'prime p:    ', p\\nprint 'prime q:    ', q\\nprint 'co-prime N: ', N\\nprint 'Phi of N:   ', phi_N\\nprint 'e:          ', e\\nprint 'd:          ', d\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":4,\"outputs\":[{\"output_type\":\"stream\",\"text\":\"prime p:     2209278197029\\nprime q:     1229012748941\\nco-prime N:  2715231070106027509096289\\nPhi of N:    2715231070102589218150320\\ne:           65537\\nd:           1662689065800343477772993\\n\",\"name\":\"stdout\"}]}\n\"mp = 2328\\nmc = pow( mp,e,N )\\nmd = pow( mc,d,N )\\nprint 'message: ', mp\\nprint 'cipher:  ', mc\\nprint 'decrypt: ', md\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":5,\"outputs\":[{\"output_type\":\"stream\",\"text\":\"message:  2328\\ncipher:   993844035141996221196954\\ndecrypt:  2328\\n\",\"name\":\"stdout\"}]}\n\"Now Let's look at how to use pycrypto to do this, it is easy to generate a private/public key pair with pycrypto. We need to specify the size of the key in bits: we picked 1024 bits. Larger is more secure. We also need to specify a random number generator function, we use the Random module of pycrypto for that.\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"from Crypto.PublicKey import RSA\\nfrom Crypto import Random\\nrandom_generator = Random.new().read\\nkey = RSA.generate(1024, random_generator)\\nkey\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":11,\"outputs\":[{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"<_RSAobj @0x7fa105ffcd40 n(1024),e,d,p,q,u,private>\"},\"metadata\":{},\"execution_count\":11}]}\n\"Now that we have our key pair, we can encrypt some data. First, we extract the public key from the key pair and use it to encrypt some data. 32 is a random parameter used by the RSA algorithm to encrypt the data. This step simulates us publishing the encryption key and someone using it to encrypt some data before sending it to us.\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"public_key = key.publickey()\\nenc_data = public_key.encrypt(r'abcdefgh', 32)\\nenc_data\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":16,\"outputs\":[{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"('\\\\r\\\\xd3\\\\xbby\\\\x87\\\\x1d\\\\xd0K9\\\\x08\\\\x8f\\\\x81N\\\\xa7\\\\x02\\\\xfath\\\\xf4BH\\\\x82\\\\xc7\\\\xc9w\\\\xe3\\\\x96T+\\\\x00\\\\x95\\\\x8ce\\\\xc8\\\\x0b+\\\\x12\\\\x81\\\\xc3\\\\xba\\\\x90\\\\'\\\\xb3\\\\xd8\\\\xa2\\\\xb6`\\\\x9b~v|t\\\\xdb+\\\\xcfx\\\\x96\\\\x92\\\\xc4\\\\xfa\\\\x7f\\\\x93v]q\\\\xf5\\\\xc3\\\\\\\\RB\\\\xbe\\\\xff\\\\xb8\\\\xc5\\\\x90\\\\x89\\\\xe8MUi\\\\xa7\\\\xc4\\\\xd6\\\\xc8\\\\x10\\\\xda\\\\xc7hk_\\\\xe0\\\\x82\\\\xbb\\\\xdb\\\\xc7\\\\xb5\\\\xce\\\\xac65\\\\x15\\\\xa2\\\\xdd2m?\\\\x98Y\\\"\\\\xa9\\\\xbdn0\\\\xdd\\\\x8b\\\\xfb\\\\xa5\\\\xb9t\\\\xb6\\\\xea.H+\\\\x8c\\\\xf6\\\\xd3\\\\x90',)\"},\"metadata\":{},\"execution_count\":16}]}\n\"key.decrypt(enc_data)\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":17,\"outputs\":[{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"'abcdefgh'\"},\"metadata\":{},\"execution_count\":17}]}\n\"from Crypto.Hash import SHA256\\nfrom Crypto.PublicKey import RSA\\nfrom Crypto import Random\\nkey = RSA.generate(1024, random_generator)\\ntext = r'abcdefgh'\\nhash = SHA256.new(text).digest()\\nsignature = key.sign(hash, '')\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":18,\"outputs\":[]}\n\"text = r'abcdefgh'\\nhash = SHA256.new(text).digest()\\npublic_key.verify(hash, signature)\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":19,\"outputs\":[{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"False\"},\"metadata\":{},\"execution_count\":19}]}\n\"From http://coding4streetcred.com/blog/post/Asymmetric-Encryption-Revisited-(in-PyCrypto)\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"import Crypto\\nfrom Crypto.PublicKey import RSA\\nfrom Crypto import Random\\nfrom Crypto.Hash import MD5\\n \\n# Use a larger key length in practice...\\nKEY_LENGTH = 1024  # Key size (in bits)\\nrandom_gen = Random.new().read\\n \\n# Generate RSA private/public key pairs for both parties...\\nkeypair_snowden = RSA.generate(KEY_LENGTH, random_gen)\\nkeypair_pytn    = RSA.generate(KEY_LENGTH, random_gen)\\n \\n# Public key export for exchange between parties...\\npubkey_snowden  = keypair_snowden.publickey()\\npubkey_pytn     = keypair_pytn.publickey()\\n \\n# Plain text messages...\\nmessage_to_snowden  = 'You are a patriot!'\\nmessage_to_pytn     = \\\"Russia is really nice this time of year...\\\\nUse encryption and make the NSA CPUs churn and burn!\\\"\\n \\n# Generate digital signatures using private keys...\\nhash_of_snowden_message = SHA256.new(message_to_snowden).digest()\\nsignature_pytn          = keypair_pytn.sign(hash_of_snowden_message, '')\\nhash_of_pytn_message    = SHA256.new(message_to_pytn).digest()\\nsignature_snowden       = keypair_snowden.sign(hash_of_pytn_message, '')\\n \\n# Encrypt messages using the other party's public key...\\nencrypted_for_snowden   = pubkey_snowden.encrypt(message_to_snowden, 32)    #from PyTN\\nencrypted_for_pytn      = pubkey_pytn.encrypt(message_to_pytn, 32)          #from Snowden\\n \\n# Decrypt messages using own private keys...\\ndecrypted_snowden   = keypair_snowden.decrypt(encrypted_for_snowden)\\ndecrypted_pytn      = keypair_pytn.decrypt(encrypted_for_pytn)\\n \\n# Signature validation and console output...\\nhash_snowden_decrypted = SHA256.new(decrypted_snowden).digest()\\nif pubkey_pytn.verify(hash_snowden_decrypted, signature_pytn):\\n    print \\\"Edward Snowden received from PyTn:\\\"\\n    print decrypted_snowden\\n    print \\\"\\\"\\n \\nhash_pytn_decrypted = SHA256.new(decrypted_pytn).digest()\\nif pubkey_snowden.verify(hash_pytn_decrypted, signature_snowden):\\n   print \\\"PyTN received from Edward Snowden:\\\"\\n   print decrypted_pytn\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":20,\"outputs\":[{\"output_type\":\"stream\",\"text\":\"Edward Snowden received from PyTn:\\nYou are a patriot!\\n\\nPyTN received from Edward Snowden:\\nRussia is really nice this time of year...\\nUse encryption and make the NSA CPUs churn and burn!\\n\",\"name\":\"stdout\"}]}\n\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}"
{"patch":[[[[0,"9}]}\n\"Fr"],[-1,"o"],[0,"m http:/"]],8339,8339,17,16],[[[0,"a\":{"],[-1,"},\"cell_type\":\"markdown\""],[1,"\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]"],[0,"}\n\"i"]],8444,8444,32,95]],"time":1458384779195}
{"patch":[[[[0,"}\n\"F"],[1,"o"],[0,"r"],[-1,"m http://coding4streetcred.com/blog/post/Asymmetric-Encryption-Revisited-(in-PyCrypto)"],[0,"\"︡{\""]],8342,8342,95,10]],"time":1458384775195}
{"patch":[[[[0,"]}\n\""],[-1,"For"],[0,"\"︡{\""]],8341,8341,11,8]],"time":1458384771198}
{"patch":[[[[0,"}]}\n"],[-1,"\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}\n"],[0,"\"imp"]],8340,8340,113,8]],"time":1458384723227}
{"patch":[[[[0,"out\"}]}\n"],[1,"\"import pyelliptic\\ndef generate_key():\\n    return pyelliptic.ECC(curve='secp521r1')\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":21,\"outputs\":[{\"output_type\":\"error\",\"ename\":\"ImportError\",\"evalue\":\"No module named pyelliptic\",\"traceback\":[\"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",\"\\u001b[1;31mImportError\\u001b[0m                               Traceback (most recent call last)\",\"\\u001b[1;32m<ipython-input-21-3f5b248bf379>\\u001b[0m in \\u001b[0;36m<module>\\u001b[1;34m()\\u001b[0m\\n\\u001b[1;32m----> 1\\u001b[1;33m \\u001b[1;32mimport\\u001b[0m \\u001b[0mpyelliptic\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m      2\\u001b[0m \\u001b[1;32mdef\\u001b[0m \\u001b[0mgenerate_key\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m      3\\u001b[0m     \\u001b[1;32mreturn\\u001b[0m \\u001b[0mpyelliptic\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mECC\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mcurve\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;34m'secp521r1'\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;31mImportError\\u001b[0m: No module named pyelliptic\"]}]}\n"],[0,"\"\"︡{\"met"]],10658,10658,16,1262]],"time":1458384714205}
{"patch":[[[[0,"}]}\n"],[-1,"\"import pyelliptic\\ndef generate_key():\\n    return pyelliptic.ECC(curve='secp521r1')\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":21,\"outputs\":[{\"output_type\":\"error\",\"ename\":\"ImportError\",\"evalue\":\"No module named pyelliptic\",\"traceback\":[\"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",\"\\u001b[1;31mImportError\\u001b[0m                               Traceback (most recent call last)\",\"\\u001b[1;32m<ipython-input-21-3f5b248bf379>\\u001b[0m in \\u001b[0;36m<module>\\u001b[1;34m()\\u001b[0m\\n\\u001b[1;32m----> 1\\u001b[1;33m \\u001b[1;32mimport\\u001b[0m \\u001b[0mpyelliptic\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m      2\\u001b[0m \\u001b[1;32mdef\\u001b[0m \\u001b[0mgenerate_key\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m      3\\u001b[0m     \\u001b[1;32mreturn\\u001b[0m \\u001b[0mpyelliptic\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mECC\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mcurve\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;34m'secp521r1'\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;31mImportError\\u001b[0m: No module named pyelliptic\"]}]}\n"],[0,"\"\"︡{"]],10662,10662,1254,8]],"time":1458384680219}
{"patch":[[[[0,"out\"}]}\n"],[1,"\"import pyelliptic\\ndef generate_key():\\n    return pyelliptic.ECC(curve='secp521r1')\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":21,\"outputs\":[{\"output_type\":\"error\",\"ename\":\"ImportError\",\"evalue\":\"No module named pyelliptic\",\"traceback\":[\"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",\"\\u001b[1;31mImportError\\u001b[0m                               Traceback (most recent call last)\",\"\\u001b[1;32m<ipython-input-21-3f5b248bf379>\\u001b[0m in \\u001b[0;36m<module>\\u001b[1;34m()\\u001b[0m\\n\\u001b[1;32m----> 1\\u001b[1;33m \\u001b[1;32mimport\\u001b[0m \\u001b[0mpyelliptic\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m      2\\u001b[0m \\u001b[1;32mdef\\u001b[0m \\u001b[0mgenerate_key\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m      3\\u001b[0m     \\u001b[1;32mreturn\\u001b[0m \\u001b[0mpyelliptic\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mECC\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mcurve\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;34m'secp521r1'\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;31mImportError\\u001b[0m: No module named pyelliptic\"]}]}\n"],[0,"\"\"︡{\"met"]],10658,10658,16,1262]],"time":1458359110139}
{"patch":[[[[0,"ed\":"],[-1,"false},\"cell_type\":\"code\",\"execution_count\":21,\"outputs\":[{\"output_type\":\"error\",\"ename\":\"ImportError\",\"evalue\":\"No module named pyelliptic\",\"traceback\":[\"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",\"\\u001b[1;31mImportError\\u001b[0m                               Traceback (most recent call last)\",\"\\u001b[1;32m<ipython-input-21-3f5b248bf379>\\u001b[0m in \\u001b[0;36m<module>\\u001b[1;34m()\\u001b[0m\\n\\u001b[1;32m----> 1\\u001b[1;33m \\u001b[1;32mimport\\u001b[0m \\u001b[0mpyelliptic\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m      2\\u001b[0m \\u001b[1;32mdef\\u001b[0m \\u001b[0mgenerate_key\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m      3\\u001b[0m     \\u001b[1;32mreturn\\u001b[0m \\u001b[0mpyelliptic\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mECC\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mcurve\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;34m'secp521r1'\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;31mImportError\\u001b[0m: No module named pyelliptic\"]}]}\n\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":"],[0,"true"]],10789,10789,1170,8]],"time":1458359036118}
{"patch":[[[[0,"]}\n\""],[-1,"import pyelliptic\\ndef generate_key():\\n    return pyelliptic.ECC(curve='secp521r1')"],[0,"\"︡{\""]],10663,10663,92,8]],"time":1458359032122}
{"patch":[[[[0,"ed\":"],[-1,"false},\"cell_type\":\"code\",\"execution_count\":20,\"outputs\":[{\"output_type\":\"stream\",\"text\":\"Edward Snowden received from PyTn:\\nYou are a patriot!\\n\\nPyTN received from Edward Snowden:\\nRussia is really nice this time of year...\\nUse encryption and make the NSA CPUs churn and burn!\\n\",\"name\":\"stdout\"}]}\n\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":"],[0,"true"]],10359,10359,354,8]],"time":1458358853121}
{"patch":[[[[0,"ytn_decrypted = "],[-1,"SHA256"],[1,"MD5"],[0,".new(decrypted_p"]],10129,10129,38,35]],"time":1458358849124}
{"patch":[[[[0,"ypted = "],[-1,"SHA256"],[1,"MD5"],[0,".new(dec"]],9913,9913,22,19]],"time":1458358845116}
{"patch":[[[[0,"ge    = "],[-1,"SHA256"],[1,"MD5"],[0,".new(mes"]],9304,9304,22,19]],"time":1458358839127}
{"patch":[[[[0,"ssage = "],[-1,"SHA256"],[1,"M"],[0,".new(mes"]],9163,9163,22,17]],"time":1458358834116}
{"patch":[[[[0,"sage = M"],[1,"D5"],[0,".new(mes"]],9164,9164,16,18]],"time":1458358830118}
{"patch":[[[[0,"]}\n\""],[-1,"import Crypto\\nfrom Crypto.PublicKey import RSA\\nfrom Crypto import Random\\nfrom Crypto.Hash import MD5\\n \\n# Use a larger key length in practice...\\nKEY_LENGTH = 1024  # Key size (in bits)\\nrandom_gen = Random.new().read\\n \\n# Generate RSA private/public key pairs for both parties...\\nkeypair_snowden = RSA.generate(KEY_LENGTH, random_gen)\\nkeypair_pytn    = RSA.generate(KEY_LENGTH, random_gen)\\n \\n# Public key export for exchange between parties...\\npubkey_snowden  = keypair_snowden.publickey()\\npubkey_pytn     = keypair_pytn.publickey()\\n \\n# Plain text messages...\\nmessage_to_snowden  = 'You are a patriot!'\\nmessage_to_pytn     = \\\"Russia is really nice this time of year...\\\\nUse encryption and make the NSA CPUs churn and burn!\\\"\\n \\n# Generate digital signatures using private keys...\\nhash_of_snowden_message = MD5.new(message_to_snowden).digest()\\nsignature_pytn          = keypair_pytn.sign(hash_of_snowden_message, '')\\nhash_of_pytn_message    = MD5.new(message_to_pytn).digest()\\nsignature_snowden       = keypair_snowden.sign(hash_of_pytn_message, '')\\n \\n# Encrypt messages using the other party's public key...\\nencrypted_for_snowden   = pubkey_snowden.encrypt(message_to_snowden, 32)    #from PyTN\\nencrypted_for_pytn      = pubkey_pytn.encrypt(message_to_pytn, 32)          #from Snowden\\n \\n# Decrypt messages using own private keys...\\ndecrypted_snowden   = keypair_snowden.decrypt(encrypted_for_snowden)\\ndecrypted_pytn      = keypair_pytn.decrypt(encrypted_for_pytn)\\n \\n# Signature validation and console output...\\nhash_snowden_decrypted = MD5.new(decrypted_snowden).digest()\\nif pubkey_pytn.verify(hash_snowden_decrypted, signature_pytn):\\n    print \\\"Edward Snowden received from PyTn:\\\"\\n    print decrypted_snowden\\n    print \\\"\\\"\\n \\nhash_pytn_decrypted = MD5.new(decrypted_pytn).digest()\\nif pubkey_snowden.verify(hash_pytn_decrypted, signature_snowden):\\n   print \\\"PyTN received from Edward Snowden:\\\"\\n   print decrypted_pytn"],[0,"\"︡{\""]],8341,8341,1972,8]],"time":1458358754194}
{"patch":[[[[0,"count\":1"],[-1,"7"],[1,"3"],[0,",\"output"]],7605,7605,17,17],[[[0,"count\":1"],[-1,"7"],[1,"3"],[0,"}]}\n\"fro"]],7718,7718,17,17],[[[0,"count\":1"],[-1,"8"],[1,"4"],[0,",\"output"]],8031,8031,17,17],[[[0,"count\":1"],[-1,"9"],[1,"5"],[0,",\"output"]],8223,8223,17,17],[[[0,"count\":1"],[-1,"9"],[1,"5"],[0,"}]}\n\"\"︡{"]],8331,8331,17,17]],"time":1458358726120}
{"patch":[[[[0,"count\":1"],[-1,"6"],[1,"2"],[0,",\"output"]],6923,6923,17,17],[[[0,":\"('"],[-1,"\\\\r\\\\xd3"],[1,"!\\\\x84"],[0,"\\\\xb"],[-1,"by\\\\x8"],[0,"7"],[1,"8"],[0,"\\\\x1"],[-1,"d"],[1,"e#j"],[0,"\\\\xd"],[-1,"0K9\\\\x08\\\\x8f\\\\x81N\\\\xa"],[1,"a\\\\xdc\\\\xd1\\\\xba\\\\xc"],[0,"7\\\\x"],[-1,"02"],[1,"12q"],[0,"\\\\xf"],[-1,"ath\\\\xf4BH\\\\x82\\\\xc"],[1,"9\\\\x1c\\\\xf7\\\\xe"],[0,"7\\\\x"],[1,"b"],[0,"c"],[-1,"9w"],[0,"\\\\x"],[-1,"e3\\\\x96T+\\\\x00\\\\x95\\\\x8ce\\\\xc"],[1,"f1\\\\x87\\\\xaa\\\\xd6\\\\x94t1\\\\xd"],[0,"8\\\\x"],[1,"d"],[0,"0"],[-1,"b+"],[0,"\\\\x1"],[-1,"2\\\\x81"],[1,"9\\\\xe4"],[0,"\\\\xc"],[-1,"3\\\\xba"],[1,"a\\\\xdd"],[0,"\\\\x9"],[-1,"0\\\\'\\\\xb3\\\\xd8\\\\xa2\\\\xb6`\\\\x9b~v|t\\\\xdb+\\\\xcfx\\\\x96"],[1,"bo8\\\\x12w\\\\xc8I\\\\xc8L\\\\x97|\\\\xb9\\\\r\\\\x98\\\\x97q\\\\xfa\\\\x1b%\\\\xad"],[0,"\\\\x9"],[-1,"2\\\\xc4"],[1,"c\\\\x12"],[0,"\\\\x"],[-1,"f"],[0,"a"],[1,"9"],[0,"\\\\x"],[-1,"7f\\\\x93v]q\\\\xf"],[1,"ad\\\\x83A\\\\xc"],[0,"5\\\\x"],[-1,"c3\\\\\\\\RB\\\\xbe"],[1,"e7t\\\\xadJ\\\\xc7"],[0,"\\\\xf"],[-1,"f\\\\xb8\\\\xc5\\\\x90\\\\x89\\\\xe8MUi\\\\xa7\\\\xc4\\\\xd6\\\\xc8\\\\x10\\\\xda\\\\xc7hk_\\\\xe"],[1,"d\\\\xa87e\\\\x97\\\\x80\\\"\\\\xf5[x\\\\xdd\\\\xa3i\\\\xba\\\\xc8\\\\xfc\\\\xdaX$\\\\xd6\\\\x18v\\\\xc8\\\"\\\\xaeqh\\\\xaaH\\\\n\\\\x15\\\\xd"],[0,"0\\\\x"],[-1,"82\\\\xbb"],[1,"b5\\\\xea"],[0,"\\\\x"],[-1,"d"],[0,"b"],[1,"e"],[0,"\\\\x"],[-1,"c7"],[1,"fe"],[0,"\\\\xb"],[-1,"5\\\\xce\\\\xac65\\\\x15\\\\xa2"],[1,"9K\\\\x94\\\\xf5=\\\\xce\\\\xb5"],[0,"\\\\x"],[1,"a"],[0,"d"],[-1,"d2m?\\\\x98Y\\\""],[0,"\\\\xa"],[-1,"9\\\\xbdn0\\\\xdd"],[1,"4\\\\x03\\\\xebDte"],[0,"\\\\x"],[-1,"8"],[0,"b"],[1,"c"],[0,"\\\\x"],[-1,"fb\\\\xa5\\\\xb9t"],[1,"c8\\\\x11\\\\xed"],[0,"\\\\xb"],[-1,"6\\\\xea.H+"],[1,"4\\\\x98-"],[0,"\\\\x"],[1,"d"],[0,"8"],[-1,"c"],[0,"\\\\xf"],[-1,"6"],[1,"2q"],[0,"\\\\xd"],[-1,"3\\\\x90"],[1,"2\\\\xc3\\\\xa5\\\\xec"],[0,"',)\""]],6996,6996,468,494],[[[0,"count\":1"],[-1,"6"],[1,"2"],[0,"}]}\n\"key"]],7517,7517,17,17]],"time":1458358722156}
{"patch":[[[[0,"encrypt("],[-1,"r"],[0,"'abcdefg"]],6810,6810,17,16]],"time":1458358715111}
{"patch":[[[[0,"[]}\n\"text = "],[-1,"r"],[0,"'abcdefgh'\\n"]],8076,8076,25,24]],"time":1458358705124}
{"patch":[[[[0,"ntext = "],[-1,"r"],[0,"'abcdefg"]],7893,7893,17,16]],"time":1458358699118}
{"patch":[[[[0,"_count\":"],[-1,"13"],[1,"8"],[0,",\"output"]],7629,7629,18,17],[[[0,"_count\":"],[-1,"13"],[1,"8"],[0,"}]}\n\"fro"]],7741,7741,18,17],[[[0,"_count\":"],[-1,"14"],[1,"9"],[0,",\"output"]],8052,8052,18,17],[[[0,"count\":1"],[-1,"5"],[1,"0"],[0,",\"output"]],8243,8243,17,17],[[[0,"count\":1"],[-1,"5"],[1,"0"],[0,"}]}\n\"\"︡{"]],8351,8351,17,17]],"time":1458358693630}
{"patch":[[[[0,"_count\":"],[-1,"11"],[1,"6"],[0,",\"output"]],6215,6215,18,17],[[[0,"{\"output_type\":\""],[1,"stream\",\"text\":\"/projects/sage/sage-6.10/local/lib/python2.7/site-packages/Crypto/Util/number.py:57: PowmInsecureWarning: Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability.\\n  _warn(\\\"Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability.\\\", PowmInsecureWarning)\\n\",\"name\":\"stderr\"},{\"output_type\":\""],[0,"execute_result\","]],6236,6236,32,425],[[[0,"5ffc"],[-1,"d4"],[1,"95"],[0,"0 n("]],6700,6700,10,10],[[[0,"_count\":"],[-1,"11"],[1,"6"],[0,"}]}\n\"Now"]],6761,6761,18,17],[[[0,"_count\":"],[-1,"12"],[1,"7"],[0,",\"output"]],7312,7312,18,17],[[[0,":\"('"],[-1,"!\\\\x84\\\\xb78\\\\x1e#j\\\\xda\\\\xdc\\\\xd1\\\\xba\\\\xc7\\\\x12q\\\\xf9\\\\x1c"],[1,"8F\\\\xe3\\\\xb0E\\\\x90X\\\\x102;\\\\xef\\\\xa7Z}\\\\x8d\\\\xe5\\\\xfb"],[0,"\\\\xf"],[-1,"7"],[1,"4"],[0,"\\\\x"],[1,"f"],[0,"e"],[-1,"7"],[0,"\\\\x"],[-1,"bc\\\\xf1\\\\x87\\\\xaa\\\\xd6\\\\x94t1\\\\xd8\\\\xd"],[1,"f4`:\\\\xa4\\\\x9e-8s\\\\xfa\\\\xa7?\\\\x84@\\\\xf7\\\\xbc\\\\xb"],[0,"0\\\\x"],[-1,"19"],[1,"f9)"],[0,"\\\\xe"],[-1,"4"],[1,"e"],[0,"\\\\x"],[-1,"c"],[0,"a"],[1,"eQ"],[0,"\\\\x"],[-1,"dd"],[1,"f4"],[0,"\\\\x9"],[-1,"bo8\\\\x12w"],[1,"f\\\\xd4"],[0,"\\\\xc"],[-1,"8I\\\\xc8L\\\\x97|\\\\xb9\\\\r\\\\x98\\\\x97q\\\\xfa"],[1,"0\\\\xf5r\\\\xa4{\\\\xf0U\\\\xc2\\\\xb8d#*\\\\x8f\\\\xee"],[0,"\\\\x1"],[-1,"b%"],[1,"5H"],[0,"\\\\xad\\\\x"],[-1,"9c\\\\x12"],[1,"fa\\\\xb7"],[0,"\\\\x"],[1,"1"],[0,"a"],[-1,"9"],[0,"\\\\x"],[-1,"ad"],[1,"0e"],[0,"\\\\x8"],[-1,"3A\\\\xc5\\\\xe7t"],[1,"6^\\\\xa0\\\\x8b"],[0,"\\\\xa"],[-1,"dJ\\\\xc7\\\\xfd\\\\xa87e\\\\x97\\\\x80\\\""],[1,"c\\\\xa2\\\\xb3\\\\x1a\\\\xf3"],[0,"\\\\xf"],[-1,"5[x\\\\xdd\\\\xa3i"],[1,"3\\\\xe8\\\\x04"],[0,"\\\\xb"],[-1,"a"],[1,"8"],[0,"\\\\x"],[-1,"c"],[0,"8"],[1,"3"],[0,"\\\\x"],[-1,"fc\\\\xdaX$\\\\xd6\\\\x18v\\\\xc8\\\"\\\\xaeqh\\\\xaaH\\\\n"],[1,"b9\\\\xe9\\\\x9e\\\\x91\\\\xb0\\\\x94\\\\xe8p\\\\xae"],[0,"\\\\x"],[1,"d"],[0,"1"],[-1,"5"],[0,"\\\\x"],[-1,"d0\\\\xb5\\\\xe"],[1,"f2\\\\x1b%\\\\x9"],[0,"a\\\\x"],[-1,"be\\\\xfe\\\\xb9K\\\\x94"],[1,"83i\\\\xc6D\\\\xc92\\\\xe9;"],[0,"\\\\xf"],[-1,"5="],[1,"a"],[0,"\\\\xc"],[-1,"e\\\\xb5\\\\xad\\\\xa4\\\\x03\\\\xebDte\\\\xb"],[1,"1\\\\xc1\\\\xbb\\\\xdb\\\\x97\\\\xb22\\\\xc"],[0,"c\\\\x"],[-1,"c8\\\\x11\\\\xed"],[1,"9e\\\\xf3\\\\xf6^v"],[0,"\\\\xb"],[-1,"4\\\\x98-\\\\xd8\\\\xf2q\\\\xd2\\\\xc3\\\\xa5\\\\xec"],[1,"7\\\\xcc\\\\xe3\\\\xa3tn\\\\xb1\\\\xbf\\\\x02\\\\x9d#@Ti"],[0,"',)\""]],7385,7385,494,488],[[[0,"_count\":"],[-1,"12"],[1,"7"],[0,"}]}\n\"key"]],7899,7899,18,17]],"time":1458358689766}
{"patch":[[[[0,"igest()\\"],[1,"nhash\\"],[0,"nsignatu"]],8319,8319,16,22]],"time":1458358679119}
{"patch":[[[[0,"ure)"],[-1,"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":10,\"outputs\":[{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"False\"},\"metadata\":{},\"execution_count\":10}]}\n\""],[1,"\\n"],[0,"\"︡{\""]],8549,8549,209,10]],"time":1458358656243}
{"patch":[[[[0,"t = 'abcdefgh'\\n"],[1,"2\\n>>> "],[0,"hash = SHA256.ne"]],8469,8469,32,39],[[[0,"gest()\\n"],[1,"3\\n>>> "],[0,"public_k"]],8518,8518,16,23]],"time":1458358652243}
{"patch":[[[[0,"]}\n\""],[-1,"text = 'abcdefgh'\\n2\\n>>> hash = SHA256.new(text).digest()\\n3\\n>>> public_key.verify(hash, signature)\\n"],[0,"\"︡{\""]],8462,8462,111,8]],"time":1458358648246}
{"patch":[[[[0," '')"],[-1,"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":9,\"outputs\":[]}\n\""],[1,"\\n"],[0,"\"︡{\""]],8360,8360,110,10]],"time":1458358640115}
{"patch":[[[[0,"]}\n\""],[-1,"from Crypto.Hash import SHA256\\nfrom Crypto.PublicKey import RSA\\nfrom Crypto import Random\\nkey = RSA.generate(1024, random_generator)\\ntext = 'abcdefgh'\\nhash = SHA256.new(text).digest()\\nhash\\nsignature = key.sign(hash, '')\\n"],[0,"\"︡{\""]],8134,8134,236,8]],"time":1458358636153}
{"patch":[[[[0,"ata)"],[-1,"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":false},\"cell_type\":\"code\",\"execution_count\":8,\"outputs\":[{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"'abcdefgh'\"},\"metadata\":{},\"execution_count\":8}]}\n\""],[1,"\\n"],[0,"\"︡{\""]],7930,7930,212,10]],"time":1458358594143}
{"patch":[[[[0,"]}\n\""],[-1,"key.decrypt(enc_data)\\n"],[0,"\"︡{\""]],7909,7909,31,8]],"time":1458358590157}
{"patch":[[[[0,"rue,\"collapsed\":"],[-1,"fals"],[1,"tru"],[0,"e},\"cell_type\":\""]],7260,7260,36,35],[[[0,"_count\":"],[-1,"7"],[1,"null"],[0,",\"output"]],7311,7311,17,20],[[[0,"s\":["],[-1,"{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"('8F\\\\xe3\\\\xb0E\\\\x90X\\\\x102;\\\\xef\\\\xa7Z}\\\\x8d\\\\xe5\\\\xfb\\\\xf4\\\\xfe\\\\xf4`:\\\\xa4\\\\x9e-8s\\\\xfa\\\\xa7?\\\\x84@\\\\xf7\\\\xbc\\\\xb0\\\\xf9)\\\\xee\\\\xaeQ\\\\xf4\\\\x9f\\\\xd4\\\\xc0\\\\xf5r\\\\xa4{\\\\xf0U\\\\xc2\\\\xb8d#*\\\\x8f\\\\xee\\\\x15H\\\\xad\\\\xfa\\\\xb7\\\\x1a\\\\x0e\\\\x86^\\\\xa0\\\\x8b\\\\xac\\\\xa2\\\\xb3\\\\x1a\\\\xf3\\\\xf3\\\\xe8\\\\x04\\\\xb8\\\\x83\\\\xb9\\\\xe9\\\\x9e\\\\x91\\\\xb0\\\\x94\\\\xe8p\\\\xae\\\\xd1\\\\xf2\\\\x1b%\\\\x9a\\\\x83i\\\\xc6D\\\\xc92\\\\xe9;\\\\xfa\\\\xc1\\\\xc1\\\\xbb\\\\xdb\\\\x97\\\\xb22\\\\xcc\\\\x9e\\\\xf3\\\\xf6^v\\\\xb7\\\\xcc\\\\xe3\\\\xa3tn\\\\xb1\\\\xbf\\\\x02\\\\x9d#@Ti',)\"},\"metadata\":{},\"execution_count\":7}"],[0,"]}\n\""]],7331,7331,584,8]],"time":1458358564127}
{"patch":[[[[0,"e\":\""],[-1,"code\",\"execution_count\":null,\"outputs\":[]"],[1,"markdown\""],[0,"}\n\"\""]],7291,7291,49,17]],"time":1458358560156}
{"patch":[[[[0,"wn\"}"],[-1,"\n\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}"]],7301,7301,109,4]],"time":1458358556115}
{"patch":[[[[0,"', 32)\\n"],[1,"3\\n>>> "],[0,"enc_data"],[1,"\\n"],[0,"\"︡{\"meta"]],7218,7218,24,33]],"time":1458358552115}
{"patch":[[[[0,"down\"}\n\""],[1," "],[0,"public_k"]],7141,7141,16,17],[[[0,"ckey()\\n"],[1,"2\\n>>> "],[0,"enc_data"]],7172,7172,16,23]],"time":1458358548120}
{"patch":[[[[0,"\"}\n\""],[-1," public_key = key.publickey()\\n2\\n>>> enc_data = public_key.encrypt('abcdefgh', 32)\\n3\\n>>> enc_data\\n"],[0,"\"︡{\""]],7145,7145,110,8]],"time":1458358544127}
{"patch":[[[[0,"down\"}\n\""],[1,"\\n\\nI have done some research into packages for elliptic curve cryptography (ECC). The most promising one so far is PyElliptic, by Yann GUIBET.\\nWith elliptic curves, we have two types of operations that we generally want to accomplish:\\nNow we will select two reasonably large integers. Miller-Rabin test to check if the number is a prime number. "],[0,"\"︡{\"meta"]],7141,7141,16,364]],"time":1458358535119}
{"patch":[[[[0,"a\":{"],[-1,"},\"cell_type\":\"markdown\""],[1,"\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]"],[0,"}\n\"\\"]],7118,7118,32,95]],"time":1458358531118}
{"patch":[[[[0,"]}\n\""],[-1,"Now that we have our key pair, we can encrypt some data. First, we extract the public key from the key pair and use it to encrypt some data. 32 is a random parameter used by the RSA algorithm to encrypt the data. This step simulates us publishing the encryption key and someone using it to encrypt some data before sending it to us."],[0,"\"︡{\""]],6771,6771,340,8]],"time":1458358527169}
{"patch":[[[[0,"}]}\n"],[-1,"\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}\n"],[0,"\"\\n\\"]],6770,6770,113,8]],"time":1458358471156}
{"patch":[[[[0,"or)\\nkey"],[1,"\\n"],[0,"\"︡{\"meta"]],6129,6129,16,18],[[[0,"rue,\"collapsed\":"],[-1,"fals"],[1,"tru"],[0,"e},\"cell_type\":\""]],6165,6165,36,35],[[[0,"nt\":"],[-1,"6,\"outputs\":[{\"output_type\":\"stream\",\"text\":\"/projects/sage/sage-6.10/local/lib/python2.7/site-packages/Crypto/Util/number.py:57: PowmInsecureWarning: Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability.\\n  _warn(\\\"Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability.\\\", PowmInsecureWarning)\\n\",\"name\":\"stderr\"},{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"<_RSAobj @0x7fa105ffc950 n(1024),e,d,p,q,u,private>\"},\"metadata\":{},\"execution_count\":6}"],[1,"null,\"outputs\":["],[0,"]}\n\""]],6220,6220,556,24]],"time":1458358464126}
{"patch":[[[[0,"rator)\\n"],[1,"5\\n>>> "],[0,"key\\n\"︡{"]],6126,6126,16,23]],"time":1458358460116}
{"patch":[[[[0,"Random\\n"],[1,"\\n>>> "],[0,"random_g"]],6044,6044,16,22],[[[0,").read\\n"],[1,"4\\n>>> "],[0,"key = RS"]],6088,6088,16,23]],"time":1458358456148}
{"patch":[[[[0,"rt RSA\\n"],[1,">>> "],[0,"from Cry"]],6017,6017,16,20],[[[0,"Random\\n"],[1,"3"],[0,"\\n>>> ra"]],6048,6048,16,17]],"time":1458358452121}
{"patch":[[[[0,"ort RSA\\"],[1,"n2\\"],[0,"n>>> fro"]],6016,6016,16,19]],"time":1458358448119}
{"patch":[[[[0,"\"}\n\""],[-1,"from Crypto.PublicKey import RSA\\n2\\n>>> from Crypto import Random\\n3\\n>>> random_generator = Random.new().read\\n4\\n>>> key = RSA.generate(1024, random_generator)\\n5\\n>>> key\\n"],[0,"\"︡{\""]],5987,5987,184,8]],"time":1458358444153}
{"patch":[[[[0,"o this, "],[-1,"i"],[1,"I"],[0,"t is eas"]],5679,5679,17,17]],"time":1458358427120}
{"patch":[[[[0," do this"],[-1,", "],[1,"\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\""],[0,"It is ea"]],5677,5677,18,58],[[[0,"a\":{"],[-1,"},\"cell_type\":\"markdown\"}\n\"\"︡{\"metadata\":{"],[0,"\"tru"]],6000,6000,50,8]],"time":1458358423122}
{"patch":[[[[0,"\"}\n\""],[-1,"It is easy to generate a private/public key pair with pycrypto. We need to specify the size of the key in bits: we picked 1024 bits. Larger is more secure. We also need to specify a random number generator function, we use the Random module of pycrypto for that."],[0,"\"︡{\""]],5723,5723,270,8]],"time":1458358419118}
{"patch":[[[[0,"n\"}\n"],[-1,"\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}\n"],[0,"\"\\n\\"]],5722,5722,113,8]],"time":1458358415217}
{"patch":[[[[0," do this"],[1,"'"],[0,"\"︡{\"meta"]],5677,5677,16,17],[[[0,"a\":{"],[-1,"},\"cell_type\":\"markdown\""],[1,"\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]"],[0,"}\n\"\\"]],5697,5697,32,95]],"time":1458358411122}
{"patch":[[[[0,"o to do "],[-1,"this"],[0,"'\"︡{\"met"]],5673,5673,20,16]],"time":1458358407116}
{"patch":[[[[0,"ycry"],[-1,"pto to do "],[0,"'\"︡{"]],5667,5667,18,8]],"time":1458358403115}
{"patch":[[[[0,"use "],[-1,"pycry"],[0,"'\"︡{"]],5662,5662,13,8]],"time":1458358399114}
{"patch":[[[[0,"k at"],[-1," how to use "],[0,"'\"︡{"]],5650,5650,20,8]],"time":1458358395113}
{"patch":[[[[0,"w Le"],[-1,"t's look at'"],[0,"\"︡{\""]],5639,5639,20,8]],"time":1458358391116}
{"patch":[[[[0,"\n\"No"],[-1,"w Le"],[0,"\"︡{\""]],5635,5635,12,8]],"time":1458358387114}
{"patch":[[[[0,"ut\"}]}\n\""],[-1,"No"],[0,"\"︡{\"meta"]],5629,5629,18,16]],"time":1458358383161}
{"patch":[[[[0,"}]}\n"],[-1,"\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}\n"],[0,"\"\\n\\"]],5632,5632,113,8]],"time":1458358372123}
{"patch":[[[[0,"t\"}]}\n\"\\"],[-1,"n\\"],[0,"nI have "]],5630,5630,18,16]],"time":1458358368120}
{"patch":[[[[0,"GUIBET.\\"],[1,"n\\"],[0,"nWith el"]],5771,5771,16,18],[[[0,"mplish:\\"],[1,"n\\"],[0,"nNow we "]],5866,5866,16,18]],"time":1458358364121}
{"patch":[[[[0," select "],[-1,"_"],[0,"e = 6553"]],4279,4279,17,16],[[[0," > 65537"],[-1,"_"],[0,". We can"]],4315,4315,17,16]],"time":1458358349138}
{"patch":[[[[0,"and "],[-1,"_d_"],[1,"d"],[0," \\nI"]],4243,4243,11,9]],"time":1458358345138}
{"patch":[[[[0,"ers "],[-1,"_e_"],[1,"e"],[0," and"]],4235,4235,11,9]],"time":1458358341136}
{"patch":[[[[0,"- q + 1\\"],[1,"n\\"],[0,"nprint '"]],3914,3914,16,18]],"time":1458358333142}
{"patch":[[[[0,"= p * q\\"],[1,"n\\"],[0,"nprint '"]],3302,3302,16,18]],"time":1458358321135}
{"patch":[[[[0,"now "],[-1,"_N_"],[1,"N"],[0," and"]],3185,3185,11,9]],"time":1458358317131}
{"patch":[[[[0,"_ and _q"],[-1,"_"],[0,", but ve"]],3127,3127,17,16]],"time":1458358313129}
{"patch":[[[[0,"ou know "],[-1,"_p_"],[1,"p"],[0," and "],[-1,"_"],[0,"q, but v"]],3117,3117,25,22]],"time":1458358309129}
{"patch":[[[[0,"_ and _q"],[-1,"_"],[0,". \"︡{\"me"]],3202,3202,17,16]],"time":1458358305128}
{"patch":[[[[0,"w _p"],[-1,"_"],[0," and "],[-1,"_"],[0,"q. \""]],3198,3198,15,13]],"time":1458358301129}
{"patch":[[[[0,"ot know "],[-1,"_"],[0,"p and q."]],3192,3192,17,16]],"time":1458358297130}
{"patch":[[[[0,"apdoor f"],[-1,"unction"],[0,") this g"]],3037,3037,23,16]],"time":1458358289126}
{"patch":[[[[0,"way "],[-1,"trapdoor f"],[0,") th"]],3031,3031,18,8]],"time":1458358285127}
{"patch":[[[[0,"lem "],[-1,"(One-way )"],[0," thi"]],3022,3022,18,8]],"time":1458358281131}
{"patch":[[[[0,"problem "],[-1," "],[0,"this giv"]],3018,3018,17,16]],"time":1458358277133}
{"patch":[[[[0,"eed(1)\\n"],[1,"\\n"],[0,"# Functi"]],781,781,16,18]],"time":1458358259127}
{"patch":[[[[0,"RSA "],[-1,"first:"],[0,"\"︡{\""]],658,658,14,8]],"time":1458358255119}
{"patch":[[[[0,"delv"],[-1,"e into RSA "],[0,"\"︡{\""]],647,647,19,8]],"time":1458358251118}
{"patch":[[[[0,"\\n\\n"],[-1,"Let's delv"],[0,"\"︡{\""]],637,637,18,8]],"time":1458358247121}
{"patch":[[[[0,"ument.\\n"],[-1,"\\n"],[0,"\"︡{\"meta"]],631,631,18,16],[[[0,"]}\n\""],[-1,"\\nI have done some research into packages for elliptic curve cryptography (ECC). The most promising one so far is PyElliptic, by Yann GUIBET.\\n\\nWith elliptic curves, we have two types of operations that we generally want to accomplish:\\n\\nNow we will select two reasonably large integers. Miller-Rabin test to check if the number is a prime number. "],[0,"\"︡{\""]],5566,5566,358,8]],"time":1458358243112}
{"patch":[[[[0,":true},\"cell_type\":\""],[-1,"markdown\""],[1,"code\",\"execution_count\":null,\"outputs\":[]"],[0,"}"]],5611,5611,30,62]],"time":1458358235611}
{"patch":[[[[0,"ument.\\n"],[1,"\\nI have done some research into packages for elliptic curve cryptography (ECC). The most promising one so far is PyElliptic, by Yann GUIBET.\\n\\nWith elliptic curves, we have two types of operations that we generally want to accomplish:\\n\\nNow we will select two reasonably large integers. Miller-Rabin test to check if the number is a prime number. "],[0,"\"︡{\"meta"]],631,631,16,366]],"time":1458358231116}
{"patch":[[[[0,"e_prime("],[1," "],[0,"n):\\n   "]],1455,1455,16,17]],"time":1458358221118}
{"patch":[[[[0,"prime( n"],[1," "],[0,"):\\n    "]],1457,1457,16,17]],"time":1458358217118}
{"patch":[[[[0,"ent.\\n\\n"],[1," "],[0,"I have d"]],633,633,16,17],[[[0,"IBET.\\n\\"],[1,"n\\n\\"],[0,"nWith el"]],776,776,16,20]],"time":1458358071650}
{"patch":[[[[0,"ent.\\n\\n"],[1,"The original version of this document had examples of using RSA cryptography with Python. However, RSA should be avoided for modern secure systems due to concerns with advancements in the discrete logarithm problem. While I haven’t written Python in a while,"],[0," I have "]],633,633,16,274]],"time":1458358067647}
{"patch":[[[[0,"BET.\\n\\n"],[1,"Public key cryptography is a type of cryptography that simplifies the key exchange problem: there is no need for a secure channel to communicate keys over. Instead, each user generates a private key with an associated public key. The public key can be given out without any security risk. There is still the challenge of distributing and verifying public keys, but that is outside the scope of this document.\\n\\nWith elliptic curves, we have two types of operations that we generally want to accomplish:"],[0,"\\n\\nWith"]],1035,1035,16,519]],"time":1458358063636}
{"patch":[[[[0,".\\n\\"],[-1,"nThe original version of this document had examples of using RSA cryptography with Python. However, RSA should be avoided for modern secure systems due to concerns with advancements in the discrete logarithm problem. While I haven’t written Python in a while, I have done some research into packages for elliptic curve cryptography (ECC). The most promising one so far is PyElliptic, by Yann GUIBET.\\n\\nPublic key cryptography is a type of cryptography that simplifies the key exchange problem: there is no need for a secure channel to communicate keys over. Instead, each user generates a private key with an associated public key. The public key can be given out without any security risk. There is still the challenge of distributing and verifying public keys, but that is outside the scope of this document.\\n\\nWith elliptic curves, we have two types of operations that we generally want to accomplish:\\n\\"],[0,"nWit"]],636,636,917,8]],"time":1458358059627}
{"patch":[[[[0,"ok at it"],[1," T"],[0,".\\n\\nPub"]],216,216,16,18]],"time":1458358035114}
{"patch":[[[[0,"k at it "],[1,"elliptic curve cryptography (ECC). The most promising one so far is PyElliptic, by Yann GUIBE"],[0,"T.\\n\\nPu"]],217,217,16,109]],"time":1458358031110}
{"patch":[[[[0,"ake a lo"],[-1,"o"],[1,"k"],[0,"k at it "]],208,208,17,17]],"time":1458358025122}
{"patch":[[[[0,"ke a"],[-1," "],[0,"lokk at "],[-1,"it "],[0,"elli"]],209,209,20,16]],"time":1458358021115}
{"patch":[[[[0,"l ta"],[-1,"ke alokk at"],[0," ell"]],205,205,19,8]],"time":1458358017112}
{"patch":[[[[0,"m. W"],[-1,"e will still ta"],[0," ell"]],190,190,23,8]],"time":1458358013112}
{"patch":[[[[0,"oblem. W"],[1,"hile I haven’t written Python in a while, I have done some research into packages for"],[0," ellipti"]],186,186,16,101]],"time":1458358009115}
{"patch":[[[[0,"n\\nT"],[-1,"hough"],[0," RSA"]],66,66,13,8]],"time":1458357979123}
{"patch":[[[[0,"phy\\n\\nT"],[1,"he original version of this document had examples of using RSA cryptography with Python. However,"],[0," RSA sho"]],62,62,16,113]],"time":1458357975127}
{"patch":[[[[0,"ptograph"],[-1,"y"],[0,"\\n\\nThe "]],56,56,17,16]],"time":1458357965125}
{"patch":[[[[0,"Key "],[-1,"Cryptograph"],[0,"\\n\\n"]],49,49,19,8]],"time":1458357961122}
{"patch":[[[[0,"\"}\n\""],[-1,"## Public Key "],[0,"\\n\\n"]],35,35,22,8]],"time":1458357957123}
{"patch":[[[[0,"\"\\n\\"],[-1,"nThe original version of this document had examples of using RSA cryptography with Python. However, RSA should be avoided for modern secure systems due to concerns with advancements in the discrete logarithm problem. While I haven’t written Python in a while, I have done some research into packages for elliptic curve cryptography (ECC). The most promising one so far is PyElliptic, by Yann GUIBET.\\n\\nPublic key cryptography is a type of cryptography that simplifies the key exchange problem: there is no need for a secure channel to communicate keys over. Instead, each user generates a private key with an associated public key. The public key can be given out without any security risk. There is still the challenge of distributing and verifying public keys, but that is outside the scope of this document.\\n\\nWith elliptic curves, we have two types of operations that we generally want to accomplish:\\n\\"],[0,"nNow"]],38,38,917,8]],"time":1458357953126}
{"patch":[[[[0,"pynb\"}\n\""],[-1,"\\n\\n"],[0,"Now we w"]],31,31,20,16]],"time":1458357949140}
{"patch":[[[[0,"ed\":"],[-1,"false},\"cell_type\":\"code\",\"execution_count\":5,\"outputs\":[{\"output_type\":\"stream\",\"text\":\"message:  2328\\ncipher:   993844035141996221196954\\ndecrypt:  2328\\n\",\"name\":\"stdout\"}]}\n\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":"],[0,"true"]],4899,4899,229,8]],"time":1458287168987}
{"patch":[[[[0,"]}\n\""],[-1,"mp = 2328\\nmc = pow( mp,e,N )\\nmd = pow( mc,d,N )\\nprint 'message: ', mp\\nprint 'cipher:  ', mc\\nprint 'decrypt: ', md"],[0,"\"︡{\""]],4739,4739,126,8]],"time":1458287165027}
{"patch":[[[[0,"ed\":"],[-1,"false},\"cell_type\":\"code\",\"execution_count\":4,\"outputs\":[{\"output_type\":\"stream\",\"text\":\"prime p:     2209278197029\\nprime q:     1229012748941\\nco-prime N:  2715231070106027509096289\\nPhi of N:    2715231070102589218150320\\ne:           65537\\nd:           1662689065800343477772993\\n\",\"name\":\"stdout\"}]}\n\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":"],[0,"true"]],4432,4432,357,8]],"time":1458287152999}
{"patch":[[[[0,"\"}\n\""],[-1,"# Function to get d from e and phi(N)\\ndef fn_rsa_get_d( e, phi ):\\n    N_phi = phi\\n    x = lasty = 0\\n    lastx = y = 1\\n    while phi != 0:\\n        q = e // phi\\n        e, phi = phi, e % phi\\n        x, lastx = lastx - q*x, x\\n        y, lasty = lasty - q*y, y\\n    if lastx < 0:\\n        lastx += N_phi\\n    return lastx\\n\\n# Lets try this\\ne = 65537\\nd = fn_rsa_get_d( e=e, phi=phi_N )\\nprint 'prime p:    ', p\\nprint 'prime q:    ', q\\nprint 'co-prime N: ', N\\nprint 'Phi of N:   ', phi_N\\nprint 'e:          ', e\\nprint 'd:          ', d"],[0,"\"︡{\""]],3844,3844,554,8]],"time":1458287149027}
{"patch":[[[[0,"wn\"}"],[-1,"\n\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}"]],3842,3842,109,4]],"time":1458287137992}
{"patch":[[[[0,"d \\n"],[-1,"It is standard practice to select e = 65537 when N - p - q + 1 > 65537. We can then select d accordingly. "],[0,"\"︡{\""]],3696,3696,114,8]],"time":1458287134031}
{"patch":[[[[0,"]}\n\""],[-1,"We now need to select two integers e and d \\n"],[0,"\"︡{\""]],3651,3651,53,8]],"time":1458287126992}
{"patch":[[[[0,"a\":{"],[-1,"},\"cell_type\":\"markdown\""],[1,"\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]"],[0,"}"]],3666,3666,29,92]],"time":1458287122998}
{"patch":[[[[0,"down\"}\n\""],[1,"\\n"],[0,"phi_N = "]],3341,3341,16,18],[[[0,"ed\":"],[-1,"false},\"cell_type\":\"code\",\"execution_count\":3,\"outputs\":[{\"output_type\":\"stream\",\"text\":\"Phi of N:    2715231070102589218150320\\nDifference:  3438290945969\\n\",\"name\":\"stdout\"}]}\n\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":"],[0,"true"]],3474,3474,229,8]],"time":1458287108990}
{"patch":[[[[0,"\"}\n\""],[-1,"\\nphi_N = N - p - q + 1\\n\\nprint 'Phi of N:   ', phi_N\\nprint 'Difference: ', N - phi_N"],[0,"\"︡{\""]],3345,3345,95,8]],"time":1458287105027}
{"patch":[[[[0,"wn\"}"],[-1,"\n\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}"]],3343,3343,109,4]],"time":1458287098989}
{"patch":[[[[0,"thmetics"],[-1,"."],[1," "],[0,"\"︡{\"meta"]],3298,3298,17,17]],"time":1458287095027}
{"patch":[[[[0,"]}\n\""],[-1,"The main idea behind RSA is that we want to have both a part of the key that is public (i.e., everybody can know that part/those parts) and a part that is private (i.e., only we know that part).\\nIn order to achieve this we are going to use another piece of mathematics that is also very easy to calculate but very hard to undo: Modular Arithmetics "],[0,"\"︡{\""]],2954,2954,357,8]],"time":1458287071499}
{"patch":[[[[0,"a\":{"],[-1,"},\"cell_type\":\"markdown\""],[1,"\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]"],[0,"}"]],2969,2969,29,92]],"time":1458287067531}
{"patch":[[[[0,"down\"}\n\""],[1,"\\n"],[0,"p = 2209"]],2700,2700,16,18],[[[0,"ed\":"],[-1,"false},\"cell_type\":\"code\",\"execution_count\":2,\"outputs\":[{\"output_type\":\"stream\",\"text\":\"N:  2715231070106027509096289\\n\",\"name\":\"stdout\"}]}\n\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":"],[0,"true"]],2814,2814,192,8]],"time":1458287058998}
{"patch":[[[[0,"\"}\n\""],[-1,"\\np = 2209278197029 \\nq = 1229012748941\\nN = p * q\\n\\nprint 'N: ', N"],[0,"\"︡{\""]],2704,2704,76,8]],"time":1458287054999}
{"patch":[[[[0,"rization"],[-1,"**"],[0," of larg"]],2450,2450,18,16]],"time":1458287046988}
{"patch":[[[[0,"the "],[-1,"**"],[0,"factori"],[-1,"z"],[0,"atio"]],2439,2439,18,15]],"time":1458287042990}
{"patch":[[[[0," factori"],[1,"s"],[0,"ation of"]],2442,2442,16,17]],"time":1458287038991}
{"patch":[[[[0,"wn\"}"],[-1,"\n\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}"]],2698,2698,109,4]],"time":1458287024001}
{"patch":[[[[0,"\\n\\n"],[-1,"$"],[0,"N=p∗q"],[-1,"$"],[0,"\\n\\n"]],2284,2284,15,13]],"time":1458287020007}
{"patch":[[[[0,"]}\n\""],[-1,"We now have two prime numbers and we will use these to generate a large co-prime N. \\n\\nN=p∗q\\n\\nThe amazing thing about these co-primes is that their factors are p and q. No other integers form the factors of this large co-prime. Since the factorisation of large numbers is a mathematically hard problem this gives us a perfect number that is easy to calculate when you know p and q, but very hard to work back from when you only know N and not know p and q. "],[0,"\"︡{\""]],2196,2196,468,8]],"time":1458287016031}
{"patch":[[[[0,"a\":{"],[-1,"},\"cell_type\":\"markdown\""],[1,"\"trusted\":true,\"collapsed\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]"],[0,"}"]],2211,2211,29,92]],"time":1458287012044}
{"patch":[[[[0,"ed\":"],[-1,"false},\"cell_type\":\"code\",\"execution_count\":1,\"outputs\":[{\"output_type\":\"stream\",\"text\":\"Prime p:  2209278197029\\nPrime q:  1229012748941\\n\",\"name\":\"stdout\"}]}\n\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":"],[0,"true"]],2035,2035,211,8]],"time":1458287000991}
{"patch":[[[[0,"\"}\n\""],[-1,"import random\\nimport math\\n\\nrandom.seed(1)\\n\\n# Function to test for composite. Return True for composite.\\ndef _func_composite_test(a,d,n,s):\\n    if pow( a, d, n ) == 1:\\n        return False\\n    for i in range(s):\\n        if pow( a, 2**i * d, n ) == n-1:\\n            return False\\n    return True\\n\\n# Function to test for primality using Miller Rabin.\\ndef _func_millerRabin_probable_prime( n ):\\n    assert n >= 2\\n    if n == 2:\\n        return True\\n    if n % 2 == 0:\\n        return False\\n    # Write n-1 as 2**s * d\\n    # Repeatedly try to divide n-1 by 2\\n    s, d = 0, n-1\\n    while True:\\n        quotient, remainder = divmod(d, 2)\\n        if remainder == 1:\\n            break\\n        s += 1\\n        d = quotient\\n    assert ( 2**s * d == n-1 )\\n    # test the base a to see whether it is a witness for the compositeness of n\\n    for i in range(0,10): # range is arbitrary...\\n        a = random.randint( 2, n-1 )\\n        if _func_composite_test(a,d,n,s):\\n            return False\\n    # Return True because n is not found to be a composite.\\n    return True\\n\\n# Function to find a prime between a lower and an upper limit.\\ndef find_prime( limit_lower, limit_upper ):\\n    # Return a pseudo prime number roughly between a and b (can be larger than b).\\n    # Raise ValueError if cannot find a pseudo prime after 10 * ln(x) + 3 tries.\\n    x = random.randint(limit_lower, limit_upper)\\n    for i in range( 0, int(10 * math.log(x) + 3) ):\\n        if _func_millerRabin_probable_prime(x):\\n            return x\\n        else:\\n            x += 1\\n    raise ValueError\\n\\n# Create a prime and show it.\\nprint 'Prime p: ', find_prime( limit_lower=10**12, limit_upper=10**13 )\\nprint 'Prime q: ', find_prime( limit_lower=10**12, limit_upper=10**13 )"],[0,"\"︡{\""]],220,220,1781,8]],"time":1458286996991}
{"patch":[[[[0,"e\":\""],[-1,"markdown\"}\n\"\"︡{\"metadata\":{\"trusted\":true,\"collapsed\":true},\"cell_type\":\""],[0,"code"]],208,208,81,8]],"time":1458286990993}
{"patch":[[[[0,"\"}\n\""],[-1,"N"],[1,"for n"],[0,"ow w"]],35,35,9,13]],"time":1458286986991}
{"patch":[[[[0,"ntegers."],[-1," "],[1,"\\n"],[0,"Miller-R"]],84,84,17,18]],"time":1458286982991}
{"patch":[[[[0,"\"}\n\""],[-1,"for now we will select two reasonably large integers.\\nMiller-Rabin test to check if the number is a prime number. "],[0,"\"︡{\""]],35,35,123,8]],"time":1458286979031}
{"patch":[[[[-1,"{\"notebook_name\":\"02_RSA_Demo.ipynb\"}\n\"\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}"]],0,0,144,0]],"time":1458286973499}