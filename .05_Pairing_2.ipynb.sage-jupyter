{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.4.3+"}}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/plain":"['Element',\n 'G1',\n 'G2',\n 'GT',\n 'In',\n 'Out',\n 'Pairing',\n 'Parameters',\n 'Zr',\n '_',\n '__',\n '___',\n '__builtin__',\n '__builtins__',\n '__doc__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n '_dh',\n '_i',\n '_i1',\n '_i2',\n '_i3',\n '_ih',\n '_ii',\n '_iii',\n '_oh',\n '_sh',\n 'exit',\n 'get_ipython',\n 'get_random',\n 'get_random_prime',\n 'quit']"},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":"from pypbc import *\ndir()"}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":"stored_params = \"\"\"type a\nq 8780710799663312522437781984754049815806883199414208211028653399266475630880222957078625179422662221423155858769582317459277713367317481324925129998224791\nh 12016012264891146079388821366740534204802954401251311822919615131047207289359704531102844802183906537786776\nr 730750818665451621361119245571504901405976559617\nexp2 159\nexp1 107\nsign1 1\nsign0 1\n\"\"\""}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":"params = Parameters(param_string=stored_params)\npairing = Pairing(params)"}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":"# build the common parameter g\ng = Element.random(pairing, G2)"}
{"cell_type":"code","execution_count":5,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":"# build the public and private keys\nprivate_key = Element.random(pairing, Zr)\npublic_key = Element(pairing, G2, value=g**private_key)"}
{"cell_type":"code","execution_count":6,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":"# set the magic hash value\nhash_value = Element.from_hash(pairing, G1, \"hashofmessage\")\n# create the signature\nsignature = hash_value**private_key\n# build the temps\ntemp1 = Element(pairing, GT)\ntemp2 = Element(pairing, GT)"}
{"cell_type":"code","execution_count":10,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"True\nFalse\n"}],"source":"# fill temp1\ntemp1 = pairing.apply(signature, g)\n#fill temp2\ntemp2 = pairing.apply(hash_value, public_key)\n# and again...\ntemp1 = pairing.apply(signature, g)\n# compare\nprint(temp1 == temp2)\n# compare to random signature\nrnd = Element.random(pairing, G1)\ntemp1 = pairing.apply(rnd, g)\n\n# compare\nprint(temp1 == temp2)"}
{"cell_type":"code","execution_count":15,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"ename":"NameError","evalue":"name 'pbc' is not defined","output_type":"error","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[1;32m<ipython-input-15-6777e58af5aa>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mhelp\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpbc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[1;31mNameError\u001b[0m: name 'pbc' is not defined"]}],"source":"help(pbc)"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":""}